AWSTemplateFormatVersion: 2010-09-09
Description: ticketapp
Transform:
- AWS::Serverless-2016-10-31
Parameters:
  TicketAppDepStackName:
    Description: Please enter Lambda Layer dependency
    Type: String
    Default: ticketapp-lambda-dependency-layer
Resources:
  TicketAppApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - UserPool
              - Arn
      DefinitionBody:
        swagger: '2.0'
        info:
          version: v1
          title: TicketApp
        basePath: /api
        schemes:
        - https
        paths:
          /tickets:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'GET'"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getTickets.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
            put:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'GET'"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createTickets.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
          /tickets/{ticketid}:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'GET'"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getTicketByIdFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                passthroughBehavior: when_no_match
                type: mock
      GatewayResponses:
        DEFAULT_4xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Methods: "'*'"
        DEFAULT_5xx:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Methods: "'*'"
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TicketAppUserPool
      UsernameAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      ClientName: TicketAppMobileClient
      GenerateSecret: false
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: ticketapp
      UserPoolId:
        Ref: UserPool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName:
        Ref: AWS::StackName
      CognitoIdentityProviders:
      - ClientId:
          Ref: UserPoolClient
        ProviderName:
          Fn::GetAtt:
          - UserPool
          - ProviderName
      AllowUnauthenticatedIdentities: false
  CognitoIdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - CognitoAuthRole
          - Arn
  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
          Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            StringEquals:
              cognito-identity.amazonaws.com:aud:
                Ref: CognitoIdentityPool
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr: authenticated
      Policies:
      - PolicyName: CognitoAuthorizedPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - mobileanalytics:PutEvents
            - cognito-sync:*
            - cognito-identity:*
            Resource: '*'
          - Effect: Allow
            Action:
            - execute-api:Invoke
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:execute-api:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - ':'
                - Ref: TicketAppApi
                - /*
  getTicketByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/ticket.getTicketByIdHandler
      Layers:
      - Fn::ImportValue:
          Fn::Sub: ${TicketAppDepStackName}-TicketAppLambdaLayer
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 101
      Description: This will insert ticket in Ticket table in Aurora table Ticket.
      Policies:
      - arn:aws:iam::899885580749:policy/TicketappRDSFullDataAccess
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: TicketAppApi
            Path: /tickets/{ticketid}
            Method: GET
      CodeUri: s3://aws-sam-ticketappdeployment/ticketapp/ca60cd0df5386861ded7c56433381988
  getTickets:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/ticket.getTicketsHandler
      Layers:
      - Fn::ImportValue:
          Fn::Sub: ${TicketAppDepStackName}-TicketAppLambdaLayer
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: This method will get all tickets.
      Policies:
      - arn:aws:iam::899885580749:policy/TicketappRDSFullDataAccess
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: TicketAppApi
            Path: /tickets/
            Method: GET
      CodeUri: s3://aws-sam-ticketappdeployment/ticketapp/ca60cd0df5386861ded7c56433381988
  createTickets:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/ticket.createTicketsHandler
      Layers:
      - Fn::ImportValue:
          Fn::Sub: ${TicketAppDepStackName}-TicketAppLambdaLayer
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 100
      Description: This method will insert ticket record in table Ticket.
      Policies:
      - arn:aws:iam::899885580749:policy/TicketappRDSFullDataAccess
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId:
              Ref: TicketAppApi
            Path: /tickets/
            Method: PUT
      CodeUri: s3://aws-sam-ticketappdeployment/ticketapp/ca60cd0df5386861ded7c56433381988
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${TicketAppApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VPCID
